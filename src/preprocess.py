# -*- coding: utf-8 -*-
"""preprocess

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18yTCLhGGN1pV3i7TPIXrwVEu8xtG2pKx
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from imblearn.over_sampling import SMOTE

def clean_and_extract_features(df):
    df = df.dropna(axis=0)

    # Filter surge_multiplier < 3 and make a copy to avoid SettingWithCopyWarning
    df = df[df['surge_multiplier'] < 3].copy()

    df['day'] = df['date_time'].dt.dayofweek
    df['hour'] = df['date_time'].dt.hour

    feature_cols = ['distance', 'day', 'hour', 'temp', 'clouds', 'pressure', 'humidity', 'wind', 'rain']
    X = df[feature_cols]
    y_raw = df['surge_multiplier']

    return X, y_raw, feature_cols


def encode_labels(y_raw):
    """
    Label-encodes surge_multiplier values.
    Returns encoded labels and the encoder.
    """
    le = LabelEncoder()
    le.fit([1, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5])
    y = le.transform(y_raw)
    return y, le

def split_and_balance_data(X, y, test_size=0.3, random_state=42):
    """
    Splits data and applies SMOTE to training set.
    """
    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)
    sm = SMOTE(random_state=random_state)
    x_train, y_train = sm.fit_resample(x_train, y_train)
    return x_train, x_test, y_train, y_test

